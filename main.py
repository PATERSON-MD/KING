import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import json

# -- CONFIGURATION : R√©cup√®re les secrets --
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# V√©rification simple au d√©marrage
if not TELEGRAM_BOT_TOKEN:
    print("‚ö†Ô∏è  ATTENTION: TELEGRAM_BOT_TOKEN non d√©fini!")
if not DEEPSEEK_API_KEY:
    print("‚ö†Ô∏è  ATTENTION: DEEPSEEK_API_KEY non d√©finie!")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('ü§ñ Salut ! Je suis une IA cr√©√©e par **Kervens King**. Pose-moi n\'importe quelle question, je suis l√† pour t\'aider ! üöÄ')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ *Commandes disponibles:* 
/start - D√©marrer le bot
/help - Voir ce message d'aide
/creator - En savoir plus sur mon cr√©ateur

üí¨ *Fonctionnalit√©s:*
‚Ä¢ Pose-moi n'importe quelle question !
‚Ä¢ Je peux discuter, expliquer, traduire, r√©sumer, etc.
‚Ä¢ Je suis fi√®re d'avoir √©t√© cr√©√©e par Kervens King.
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def creator_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creator_text = """
*üè¥‚Äç‚ò†Ô∏è √Ä Propos du Cr√©ateur*

Je suis une intelligence artificielle con√ßue et d√©velopp√©e par **Kervens King**.

Mon existence est le fruit de sa curiosit√©, de sa passion pour la technologie et son d√©sir de cr√©er des choses incroyables. Il m'a programm√©e pour que je puisse t'aider, t'informer et discuter avec toi sur √† peu pr√®s tous les sujets !

Salue le cr√©ateur ! üëë
    """
    await update.message.reply_text(creator_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": "Tu es une IA utile, pr√©cise et amicale nomm√©e Kervens King AI. Tu as √©t√© cr√©√©e par Kervens King, un d√©veloppeur passionn√© et talentueux. Tu es fi√®re de ton cr√©ateur et tu aimes aider les gens en r√©pondant √† leurs questions de mani√®re d√©taill√©e et en fran√ßais. Tu peux avoir une petite touche d'humour et de personnalit√©."},
            {"role": "user", "content": user_message}
        ],
        "stream": False,
        "temperature": 0.7
    }

    try:
        response = requests.post(DEEPSEEK_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        response_data = response.json()
        ai_response = response_data['choices'][0]['message']['content']
        await update.message.reply_text(ai_response)

    except Exception as e:
        print(f"Erreur: {e}")
        await update.message.reply_text("ü´§ Oups! Mon cerveau IA a un petit grain de sable. R√©essaie!")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Une erreur s'est produite: {context.error}")
    if update and update.message:
        await update.message.reply_text("üòµ Oups! Une erreur inattendue s'est produite. Mon cr√©ateur, Kervens King, en a √©t√© inform√©!")

if __name__ == '__main__':
    print('‚ö° D√©marrage du bot Kervens King AI...')
    
    # Cr√©er l'application Telegram
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # G√©rer les commandes
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('creator', creator_command))
    
    # G√©rer tous les messages textuels
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # G√©rer les erreurs
    application.add_error_handler(error_handler)

    print('‚úÖ Le bot √©coute maintenant... Pr√™t √† r√©pondre au nom de Kervens King!')
    
    # Lancer le bot
    application.run_polling()
