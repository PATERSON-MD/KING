const { Telegraf } = require('telegraf');
const axios = require('axios');
require('dotenv').config();

class TelegramAIBot {
    constructor() {
        this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        this.deepseekApiKey = process.env.DEEPSEEK_API_KEY;
        this.conversations = new Map();
        this.creator = "Kervens King";
        this.setupHandlers();
    }

    setupHandlers() {
        // Commande de d√©marrage
        this.bot.start((ctx) => {
            ctx.reply(`ü§ñ Bonjour ! Je suis un assistant IA cr√©√© par **${this.creator}**.\n\n`
                + '‚ú® *Fonctionnalit√©s:*\n'
                + '‚Ä¢ R√©ponses pr√©cises et concises\n'
                + '‚Ä¢ Historique de conversation intelligent\n'
                + '‚Ä¢ Support Markdown\n'
                + '‚Ä¢ Bas√© sur DeepSeek AI\n\n'
                + 'Envoyez-moi un message pour commencer !', 
                { parse_mode: 'Markdown' }
            );
        });

        // Commande d'aide
        this.bot.help((ctx) => {
            ctx.reply(`üí° *Aide - Bot IA par ${this.creator}*\n\n`
                + 'üìù *Utilisation:*\n'
                + '‚Ä¢ √âcrivez simplement votre question\n'
                + '‚Ä¢ Je maintiens le contexte de la conversation\n'
                + '‚Ä¢ R√©ponses pr√©cises et techniques\n\n'
                + '‚ö° *Commandes:*\n'
                + '/start - D√©marrer le bot\n'
                + '/help - Afficher cette aide\n'
                + '/clear - Effacer l\'historique\n'
                + '/info - Informations techniques\n'
                + '/creator - √Ä propos du cr√©ateur',
                { parse_mode: 'Markdown' }
            );
        });

        // Commande pour effacer l'historique
        this.bot.command('clear', (ctx) => {
            const chatId = ctx.chat.id;
            this.conversations.delete(chatId);
            ctx.reply('‚úÖ *Historique de conversation effac√© avec succ√®s!*', 
                { parse_mode: 'Markdown' }
            );
        });

        // Commande info
        this.bot.command('info', (ctx) => {
            ctx.reply(`ü§ñ *Informations Techniques*\n\n`
                + `‚Ä¢ *Cr√©ateur:* ${this.creator}\n`
                + '‚Ä¢ *IA:* DeepSeek Chat\n'
                + '‚Ä¢ *Plateforme:* Node.js + Telegraf\n'
                + '‚Ä¢ *Version:* 2.0.0\n'
                + '‚Ä¢ *Pr√©cision:* Mode technique activ√©\n\n'
                + '‚ö° _Optimis√© pour des r√©ponses exactes et concises_',
                { parse_mode: 'Markdown' }
            );
        });

        // Commande cr√©ateur
        this.bot.command('creator', (ctx) => {
            ctx.reply(`üéØ *√Ä propos du Cr√©ateur*\n\n`
                + `‚Ä¢ *Nom:* ${this.creator}\n`
                + '‚Ä¢ *R√¥le:* D√©veloppeur Full-Stack\n'
                + '‚Ä¢ *Sp√©cialit√©:* IA et Automatisation\n'
                + '‚Ä¢ *Philosophie:* Pr√©cision et efficacit√©\n\n'
                + 'üí° _Ce bot refl√®te l\'approche technique et pr√©cise de son cr√©ateur_',
                { parse_mode: 'Markdown' }
            );
        });

        // Gestionnaire pour tous les messages texte
        this.bot.on('text', async (ctx) => {
            try {
                const message = ctx.message.text;
                const chatId = ctx.chat.id;

                // Ignorer les commandes d√©j√† trait√©es
                if (message.startsWith('/')) return;

                await ctx.sendChatAction('typing');

                if (!this.conversations.has(chatId)) {
                    this.conversations.set(chatId, []);
                }

                const conversationHistory = this.conversations.get(chatId);

                conversationHistory.push({
                    role: 'user',
                    content: message
                });

                // Limiter l'historique pour maintenir la pr√©cision
                if (conversationHistory.length > 8) {
                    conversationHistory.splice(0, conversationHistory.length - 8);
                }

                const aiResponse = await this.getDeepSeekResponse(conversationHistory);

                conversationHistory.push({
                    role: 'assistant',
                    content: aiResponse
                });

                await ctx.reply(aiResponse, {
                    parse_mode: 'Markdown',
                    reply_to_message_id: ctx.message.message_id
                });

            } catch (error) {
                console.error('Erreur:', error);
                ctx.reply('‚ùå *Erreur de traitement* - Veuillez r√©essayer.', 
                    { parse_mode: 'Markdown' }
                );
            }
        });

        // Gestionnaire pour autres types de messages
        this.bot.on('message', (ctx) => {
            if (ctx.message.text && !ctx.message.text.startsWith('/')) return;
            ctx.reply('üìù *Je traite uniquement les messages texte pour une pr√©cision optimale.*', 
                { parse_mode: 'Markdown' }
            );
        });
    }

    // M√©thode pour interagir avec DeepSeek avec configuration de pr√©cision
    async getDeepSeekResponse(messages) {
        try {
            const response = await axios.post(
                'https://api.deepseek.com/v1/chat/completions',
                {
                    model: 'deepseek-chat',
                    messages: [
                        {
                            role: 'system',
                            content: 'Vous √™tes un assistant technique extr√™mement pr√©cis et concis. '
                                + 'CR√âATEUR: Kervens King - D√©veloppeur Full-Stack\n\n'
                                + 'DIRECTIVES STRICTES:\n'
                                + '1. R√©ponses techniques et exactes\n'
                                + '2. Concision et pr√©cision avant tout\n'
                                + '3. Utilisation de markdown pour la clart√©\n'
                                + '4. √âviter les phrases inutiles\n'
                                + '5. Privil√©gier les faits v√©rifiables\n'
                                + '6. Structure logique et organis√©e\n'
                                + '7. Ton professionnel et technique\n\n'
                                + 'R√©pondez toujours en fran√ßais sauf demande contraire.'
                        },
                        ...messages
                    ],
                    temperature: 0.3, // Temp√©rature basse pour plus de pr√©cision
                    max_tokens: 1500,
                    top_p: 0.9,
                    frequency_penalty: 0.2,
                    presence_penalty: 0.1,
                    stream: false
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.deepseekApiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 25000
                }
            );

            return response.data.choices[0].message.content;

        } catch (error) {
            console.error('Erreur DeepSeek:', error.response?.data || error.message);
            throw new Error('Impossible de contacter le service IA pour le moment');
        }
    }

    setupErrorHandling() {
        this.bot.catch((error, ctx) => {
            console.error('Erreur bot:', error);
            ctx.reply('‚ö° *Erreur syst√®me* - Veuillez contacter le support technique.', 
                { parse_mode: 'Markdown' }
            );
        });
    }

    start() {
        this.setupErrorHandling();
        
        this.bot.launch().then(() => {
            console.log(`ü§ñ Bot IA de ${this.creator} d√©marr√© avec succ√®s!`);
            console.log('‚ö° Mode: Pr√©cision technique activ√©e');
        });

        // Arr√™t propre
        process.once('SIGINT', () => {
            console.log('üõë Arr√™t du bot...');
            this.bot.stop('SIGINT');
        });
        
        process.once('SIGTERM', () => {
            console.log('üõë Arr√™t du bot...');
            this.bot.stop('SIGTERM');
        });
    }
}

// Initialisation
const initializeBot = () => {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
        console.error('‚ùå TELEGRAM_BOT_TOKEN manquant');
        process.exit(1);
    }

    if (!process.env.DEEPSEEK_API_KEY) {
        console.error('‚ùå DEEPSEEK_API_KEY manquant');
        process.exit(1);
    }

    const aiBot = new TelegramAIBot();
    aiBot.start();
};

module.exports = { TelegramAIBot, initializeBot };

// Ex√©cution directe
if (require.main === module) {
    console.log('üöÄ D√©marrage du bot IA par Kervens King...');
    initializeBot();
}
